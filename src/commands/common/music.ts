import { CommandType } from "../../structs/types/Command";
import { VoiceChannel, GuildMember } from "discord.js";
import {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  StreamType,
  VoiceConnection,
} from "@discordjs/voice";
import { spawn } from "child_process";
import { google } from "googleapis";
import { CommandInteractionOptionResolver } from "discord.js";

// Configura√ß√£o da API do YouTube
const youtube = google.youtube("v3");
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// Fun√ß√£o para buscar v√≠deos no YouTube
async function searchVideo(query: string): Promise<string | null> {
  try {
    console.log("üîç Iniciando busca no YouTube...");
    const response = await youtube.search.list({
      part: ["snippet"],
      q: query,
      type: ["video"],
      maxResults: 1,
      key: YOUTUBE_API_KEY,
    });

    const items = response.data?.items;
    if (!items || items.length === 0) {
      console.log("‚ùå Nenhum v√≠deo encontrado para a pesquisa:", query);
      return null;
    }

    console.log("üé• V√≠deo encontrado:", items[0].snippet?.title);
    return `https://www.youtube.com/watch?v=${items[0].id?.videoId}`;
  } catch (error) {
    console.error("Erro ao buscar v√≠deo no YouTube:", error);
    return null;
  }
}

// Fun√ß√£o para tocar m√∫sica
async function playMusic(url: string, voiceChannel: VoiceChannel) {
  let connection: VoiceConnection | null = null;
  let isConnectionDestroyed = false;

  try {
    console.log("üéµ Preparando para tocar m√∫sica... URL:", url);

    // Verifica se o `yt-dlp` est√° instalado
    console.log("üîç Verificando yt-dlp...");
    const checkYtDl = spawn("yt-dlp", ["--version"]);
    checkYtDl.on("error", () => {
      throw new Error("yt-dlp n√£o est√° instalado ou n√£o foi encontrado no sistema.");
    });

    // Conecta ao canal de voz
    console.log("üîó Conectando ao canal de voz...");
    connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: voiceChannel.guild.id,
      adapterCreator: voiceChannel.guild.voiceAdapterCreator,
    });

    // Cria o processo do yt-dlp para obter o stream de √°udio
    console.log("üéß Obtendo stream de √°udio...");
    const process = spawn("yt-dlp", [
      "-f",
      "bestaudio",
      "--no-playlist",
      "-o",
      "-",
      url,
    ]);

    process.stderr.on("data", (data) => {
      console.error(`yt-dlp erro: ${data}`);
    });

    const resource = createAudioResource(process.stdout, {
      inputType: StreamType.Arbitrary,
    });

    const player = createAudioPlayer();
    console.log("‚ñ∂Ô∏è Player criado. Iniciando reprodu√ß√£o...");
    player.play(resource);
    connection.subscribe(player);

    // Eventos do player
    player.on(AudioPlayerStatus.Idle, () => {
      console.log("‚èπ M√∫sica finalizada. Desconectando...");
      if (connection && !isConnectionDestroyed) {
        connection.destroy();
        isConnectionDestroyed = true;
      }
    });

    player.on("error", (error) => {
      console.error("Erro no player:", error);
      if (connection && !isConnectionDestroyed) {
        connection.destroy();
        isConnectionDestroyed = true;
      }
    });

    console.log(`üé∂ Tocando: ${url}`);
  } catch (error) {
    console.error("Erro ao tocar m√∫sica:", error);
    if (connection && !isConnectionDestroyed) {
      connection.destroy();
    }
    throw new Error("N√£o foi poss√≠vel tocar a m√∫sica.");
  }
}

// Comando music
const command: CommandType = {
  name: "music",
  description: "Tocar m√∫sica por nome ou link do YouTube.",
  options: [
    {
      name: "query",
      description: "Nome da m√∫sica ou URL do YouTube",
      type: 3, // Tipo STRING
      required: true,
    },
  ],
  run: async ({ interaction }) => {
    console.log("üì• Comando 'music' recebido.");
    const query = (interaction.options as CommandInteractionOptionResolver).getString("query", true);

    const member = interaction.member;
    if (!(member instanceof GuildMember) || !member.voice.channel) {
      console.log("‚ùå Usu√°rio n√£o est√° em um canal de voz.");
      return interaction.reply({
        content: "Voc√™ precisa estar em um canal de voz para usar este comando!",
        ephemeral: true,
      });
    }

    console.log("üé§ Usu√°rio em canal de voz:", member.voice.channel.name);
    await interaction.deferReply();

    try {
      let url = query;

      // Se o query n√£o for um link v√°lido, fa√ßa uma busca no YouTube
      if (!url.startsWith("https://www.youtube.com/watch")) {
        console.log("üîé Query n√£o √© um link v√°lido. Buscando no YouTube...");
        interaction.editReply("üîé Buscando a m√∫sica no YouTube...");
        url = (await searchVideo(query)) || "";
        if (!url) {
          console.log("‚ùå Nenhum v√≠deo encontrado para a pesquisa:", query);
          return interaction.editReply("‚ùå Nenhum v√≠deo encontrado para essa pesquisa.");
        }
      }

      // Tocar a m√∫sica
      console.log("üé∂ Iniciando reprodu√ß√£o...");
      await playMusic(url, member.voice.channel as VoiceChannel);
      await interaction.editReply(`üé∂ Tocando m√∫sica: ${url}`);
    } catch (error: any) {
      console.error("Erro no comando 'music':", error);
      await interaction.editReply(error.message || "Erro ao tocar m√∫sica.");
    }
  },
};

export default command;
